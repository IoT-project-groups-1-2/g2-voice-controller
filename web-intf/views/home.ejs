<!DOCTYPE html>
<html lang="en">
<script src="//cdnjs.cloudflare.com/ajax/libs/SpeechKITT/0.3.0/speechkitt.min.js"></script>
<script src="//cdnjs.cloudflare.com/ajax/libs/annyang/2.6.1/annyang.min.js"></script>
<style>
    body {
        font-family: Arial;
        background: lightblue ;
        margin:0;
    }


    p{
        font-size: 20px;
    }
    .header {
        padding: 30px;
        text-align: left;
        background: #1abc9c;
        color: white;
        font-size: 30px;
    }

    /* Sets the containers height and width */
    .base-timer {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 200px;
        height: 200px;


    }



    .base-timer__svg {
        transform: scaleX(-1);

    }

    .base-timer__circle {
        fill: none;
        stroke: none;
    }

    .base-timer__path-elapsed {
        stroke-width: 7px;
        stroke: grey;
    }

    .base-timer__path-remaining {
        stroke-width: 7px;
        stroke-linecap: round;
        transform: rotate(90deg);
        transform-origin: center;
        transition: 1s linear all;
        fill-rule: nonzero;
        stroke: currentColor;
    }

    .base-timer__path-remaining.green {
        color: rgb(65, 184, 131);
    }

    .base-timer__path-remaining.orange {
        color: orange;
    }

    .base-timer__path-remaining.red {
        color: red;
    }

    .base-timer__label {
        position: absolute;
        width: 200px;
        height: 200px;
        top: 0%;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 28px;
    }


</style>
<head>
    <meta charset="UTF-8">
    <title>Recording</title>
</head>
<body>

<div class = "header">
    <h1>SAY SOMETHING!</h1>
</div>

<div class = "testing">

</div>

<p id="text"></p>
<p id="message"></p>
<p id="mqtt-message"></p>
<p id="abort-message"></p>
<div id="app"></div>

<script>
    const FULL_DASH_ARRAY = 283;
    const WARNING_THRESHOLD = 7;
    const ALERT_THRESHOLD = 3;

    const COLOR_CODES = {
        info: {
            color: "green"
        },
        warning: {
            color: "orange",
            threshold: WARNING_THRESHOLD
        },
        alert: {
            color: "red",
            threshold: ALERT_THRESHOLD
        }
    };

    const TIME_LIMIT = 10;
    let timePassed = 0;
    let timeLeft = TIME_LIMIT;
    let timerInterval = null;
    let remainingPathColor = COLOR_CODES.info.color;

    document.getElementById("app").innerHTML = `
<div class="base-timer">
  <svg class="base-timer__svg" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
    <g class="base-timer__circle">
      <circle class="base-timer__path-elapsed" cx="50" cy="50" r="45"></circle>
      <path
        id="base-timer-path-remaining"
        stroke-dasharray="283"
        class="base-timer__path-remaining ${remainingPathColor}"
        d="
          M 50, 50
          m -45, 0
          a 45,45 0 1,0 90,0
          a 45,45 0 1,0 -90,0
        "
      ></path>
    </g>
  </svg>
  <span id="base-timer-label" class="base-timer__label">${formatTime(
        timeLeft
    )}</span>
</div>
`;



    function onTimesUp() {
        clearInterval(timerInterval);
        timeLeft = 10;
        timePassed = 0;
        setRemainingPathColor(timeLeft);
        setCircleDasharray();
        document.getElementById("base-timer-label").innerHTML = formatTime(
            timeLeft
        );
        const { alert, warning, info } = COLOR_CODES;
        document
            .getElementById("base-timer-path-remaining")
            .classList.remove(alert.color);
        document
            .getElementById("base-timer-path-remaining")
            .classList.remove(warning.color);
        document
            .getElementById("base-timer-path-remaining")
            .classList.add(info.color);


    }

    function startTimer() {
        timerInterval = setInterval(() => {
            timePassed = timePassed += 1;
            timeLeft = TIME_LIMIT - timePassed;
            document.getElementById("base-timer-label").innerHTML = formatTime(
                timeLeft
            );
            setCircleDasharray();
            setRemainingPathColor(timeLeft);

            if (timeLeft === 0) {
                onTimesUp();
            }
        }, 1000);
    }

    function formatTime(time) {
        const minutes = Math.floor(time / 60);
        let seconds = time % 60;

        if (seconds < 10) {
            seconds = `0${seconds}`;
        }

        return `${minutes}:${seconds}`;
    }

    function setRemainingPathColor(timeLeft) {
        const { alert, warning, info } = COLOR_CODES;
        if (timeLeft <= alert.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(warning.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(alert.color);
        } else if (timeLeft <= warning.threshold) {
            document
                .getElementById("base-timer-path-remaining")
                .classList.remove(info.color);
            document
                .getElementById("base-timer-path-remaining")
                .classList.add(warning.color);
        }
    }

    function calculateTimeFraction() {
        const rawTimeFraction = timeLeft / TIME_LIMIT;
        return rawTimeFraction - (1 / TIME_LIMIT) * (1 - rawTimeFraction);
    }

    function setCircleDasharray() {
        const circleDasharray = `${(
            calculateTimeFraction() * FULL_DASH_ARRAY
        ).toFixed(0)} 283`;
        document
            .getElementById("base-timer-path-remaining")
            .setAttribute("stroke-dasharray", circleDasharray);
    }








    if (annyang) {

        annyang.addCommands({
            'hello': () => { document.getElementById('text').innerText = 'Hello';SpeechKITT.abortRecognition();onTimesUp(); },
            'hi': () => { document.getElementById('text').innerText = 'Hi';SpeechKITT.abortRecognition();onTimesUp();}
        });



        SpeechKITT.annyang();

        let isRecording = true;
        let running = 0;
        let counts = 0;
        setInterval(() => {

            if(SpeechKITT.isListening()) {
                counts += 1;
                if(isRecording === true){
                    isRecording = false;
                    startTimer();
                    running += 1;

                }

                if(counts >= 10000/50){
                        SpeechKITT.abortRecognition();

                        isRecording = true;
                        onTimesUp();
                        counts = 0;
                }


            }else if (!SpeechKITT.isListening()){
                counts = 0;
                isRecording = true;
                if(running === 1){
                    running = 0;
                    onTimesUp();
                }

            }
        }, 50);

        

        // Define a stylesheet for KITT to use
        SpeechKITT.setStylesheet('//cdnjs.cloudflare.com/ajax/libs/SpeechKITT/0.3.0/themes/flat.css');

        // Render KITT's interface
        SpeechKITT.vroom();






    }

    setInterval(function () {
        fetch('/voice-data').then(tmp => tmp.json()).then(data => {
            document.getElementById('mqtt-message').innerText = data;
        })
    },1000);
</script>
</body>
</html>